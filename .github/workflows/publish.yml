name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  test:
    runs-on: ubuntu-latest
    environment: testing
    permissions:
      contents: read
      pull-requests: read
      issues: read
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build
        env:
          PUBLIC_SUPABASE_URL: http://localhost:54321
          PUBLIC_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0

      - name: Install Playwright browsers
        run: pnpm playwright-install-ci

      - name: Install Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase
        run: supabase start

      - name: Start the server for all packages
        run: |
          pnpm preview &
          echo $! > /tmp/preview.pid
        env:
          PUBLIC_SUPABASE_URL: http://localhost:54321
          PUBLIC_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0

      - name: Wait for the servers to start
        run: sleep 10

      - name: Run Tests
        run: pnpm run test
        env:
          PUBLIC_SUPABASE_URL: http://localhost:54321
          PUBLIC_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0

      - name: Stop preview servers
        if: always()
        run: |
          if [ -f /tmp/preview.pid ]; then
            kill $(cat /tmp/preview.pid) 2>/dev/null || true
            rm -f /tmp/preview.pid
          fi
          pkill -f 'vite preview' 2>/dev/null || true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            packages/main/screenshots/
            packages/main/errors/
            packages/test-web-component/screenshots/
            packages/test-svelte/screenshots/
          retention-days: 5

  release:
    name: Release
    needs: test
    environment: publishing
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm prepack

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm changeset publish
          version: pnpm changeset version
          commit: "chore: new release"
          title: "chore: new release candidate"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Push updated site to demo-site branch
        if: steps.changesets.outputs.published == 'true'
        run: |
          echo "Published package, pushing main contents to demo-site branch..."
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          # Ensure we have the latest refs
          git fetch origin demo-site || true
          # Create or reset demo-site to main's latest state
          git checkout -B demo-site origin/main
          # Push branch update
          git push --force-with-lease origin demo-site
          echo "demo-site branch updated successfully"

